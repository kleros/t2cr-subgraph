enum Status {
  "The token is not registered on the TCR and there are no pending requests."
  Absent
  "The token is registered and there are no pending requests."
  Registered
  "The token is not registered on the TCR, but there is a pending registration request."
  RegistrationRequested
  "The token is registered on the TCR, but there is a pending removal request. These are sometimes also called removal requests."
  ClearingRequested
}

enum Ruling {
  "The arbitrator did not rule or refused to rule."
  None
  "The arbitrator ruled in favor of the requester."
  Accept
  "The arbitrator in favor of the challenger."
  Reject
}

enum Result {
  "The request was rejected due to arbitrators refusing to rule."
  Reverted
  "The request was accepted."
  Accepted
  "The request was rejected"
  Rejected
  "The request is still being processed."
  Pending
}

type Registry @entity {
  "The registry address"
  id: ID!
  "URI to the registration meta evidence file."
  registrationMetaEvidenceURI: String!
  "URI to the removal meta evidence file."
  clearingMetaEvidenceURI: String!
  "The tokens submitted to this list"
  tokens: [Token!]! @derivedFrom(field: "registry")
  "The total number of tokens ever submitted"
  numberOfSubmissions: BigInt!
  "The total number of meta evidence events emitted"
  numberOfMetaEvidenceEvents: BigInt!
  "The duration of the challenge period"
  challengePeriodDuration: BigInt!
  "The fee stake multiplier requested from the winner of the previous round in basis points."
  winnerStakeMultiplier: BigInt!
  "The fee stake multiplier requested from the loser of the previous round in basis points."
  sharedStakeMultiplier: BigInt!
  "The fee stake multiplier requested from when there isn't a winner or loser (e.g. when its the first round or the arbitrator refused to rule) in basis points."
  loserStakeMultiplier: BigInt!
  "The base deposit requested from the challenger."
  challengerBaseDeposit: BigInt!
  "The base deposit requested to place a request."
  requesterBaseDeposit: BigInt!
  "The arbitrator used for new disputes."
  arbitrator: Bytes!
  "The extra data used for new disputes."
  arbitratorExtraData: Bytes!
}

type Request @entity {
  "The ID of the request. <tokenID>-<index>"
  id: ID!
  "The time the request was submitted."
  submissionTime: BigInt!
  "Whether the request was accepted or rejected."
  result: Result!
  "The request type. Can be either RegistrationRequested or ClearingRequested."
  type: Status!
  "The address that placed the request."
  requester: Bytes!
  "The time the request was resolved or 0 if it is not resolved."
  resolutionTime: BigInt!
  "The address of the arbitrator used for this request."
  arbitrator: Bytes!
  "The extra data used for this request."
  arbitratorExtraData: Bytes!
  "The URI to the meta evidence file used for this request."
  metaEvidenceURI: String!
  "True if a dispute was raised."
  disputed: Boolean!
  "ID of the dispute, if any."
  disputeID: BigInt!
  "The time the dispute was created."
  disputeCreationTime: BigInt!
  "The address of the party that challenged the request"
  challenger: Bytes!
  "Tracks each round of a dispute in the form rounds[roundID]."
  rounds: [Round!]! @derivedFrom(field: "request")
  "The total number of rounds on this request."
  numberOfRounds: BigInt!
  "The token this request belongs to."
  token: Token!
  "The evidences submitted for this request."
  evidences: [Evidence!]! @derivedFrom(field: "request")
  "The number of evidence submitted"
  numberOfEvidences: BigInt!
  "The block this request was created."
  blockNumber: BigInt!
}

type Evidence @entity {
  "The evidence ID."
  id: ID!
  "The address of the party that submitted the evidence."
  submitter: Bytes!
  "The time when the evidence was submitted in seconds."
  submissionTime: BigInt!
  "The URI to the evidence file."
  evidenceURI: String!
  "The request this evidence is related to."
  request: Request!
  "The hash of the transaction where the evidence was submitted"
  hash: Bytes!
  "The block this evidence was mined."
  blockNumber: BigInt!
}

type Contribution @entity {
  "The contribution's ID, keccak256(roundID, contributor)."
  id: ID!
  "The time the contributor made the last contribution to this round."
  contributionTime: BigInt!
  "The round the contribution is for."
  round: Round!
  "The address of the contributor."
  contributor: Bytes!
  "The contributions for each side."
  values: [BigInt!]!
}

type Round @entity {
  "The round ID."
  id: ID!
  "The total amount of appeal fees contributed to the requester in this round."
  amountPaidRequester: BigInt!
  "The total amount of appeal fees contributed to the challenger in this round."
  amountPaidChallenger: BigInt!
  "Whether the requester is fully funded."
  hasPaidRequester: Boolean!
  "Whether the challenger is fully funded."
  hasPaidChallenger: Boolean!
  "Sum of reimbursable fees and stake rewards available to the parties that made contributions to the side that ultimately wins a dispute."
  feeRewards: BigInt!
  "The time this round was appealed, if it was."
  appealTime: BigInt!
  "The request to which this round belongs."
  request: Request!
  "The ruling given by the arbitrator, if any."
  ruling: Ruling!
  "The time the ruling was given."
  rulingTime: BigInt!
  "The start of the appeal period, if any."
  appealPeriodStart: BigInt!
  "The end of the appeal period, if any."
  appealPeriodEnd: BigInt!
  "The contributions for the round."
  contributions: [Contribution!]! @derivedFrom(field: "round")
}

type Token @entity {
  "The ID of the token."
  id: ID!
  "The number of requests submitted for this token."
  numberOfRequests: BigInt!
  "The token name (e.g. Pinakion)."
  name: String!
  "The token ticker (e.g. PNK)."
  ticker: String!
  "The address of the token contract."
  address: Bytes!
  "The multihash of the token image."
  symbolMultihash: String!
  "The current status of the token."
  status: Status!
  "The requests submitted for the token."
  requests: [Request!]! @derivedFrom(field: "token")
  "The registry this token was submitted to."
  registry: Registry!
  "Whether the token is currently disputed."
  disputed: Boolean!
  "The start of the appeal period, if any."
  appealPeriodStart: BigInt!
  "The end of the appeal period, if any."
  appealPeriodEnd: BigInt!
  "The last time the token status changed."
  lastStatusChangeTime: BigInt!
}

type _Schema_
  @fulltext(
    name: "tokenSearch"
    language: en
    algorithm: rank
    include: [
      { entity: "Token", fields: [{ name: "name" }, { name: "ticker" }] }
    ]
  )
